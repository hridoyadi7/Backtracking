https://practice.geeksforgeeks.org/problems/n-queen-problem0315/1/?category[]=Backtracking&category[]=Backtracking&page=1&query=category[]Backtrackingpage1category[]Backtracking

    bool isSafe(int row,int col,int n,vector<vector<int>>&vec)
    {
        for(int i=0;i<col;i++)
            if(vec[row][i]==1)
                return false;
        for(int i=row,j=col;i>=0 && j>=0;i--,j--)
            if(vec[i][j]==1)
                return false;
        for(int i=row,j=col;i<n && j>=0;i++,j--)
            if(vec[i][j]==1)
                return false;
        return true;
    }
    void nQueenRec(vector<vector<int>>&ans,vector<vector<int>>&vec,vector<int>v,int i,int j,int N)
    {
        if(j==N)
        {
            ans.push_back(v);
            return ;
        }
        for(int n=0;n<N;n++)
        {
            if(isSafe(n,j,N,vec))
            {
                vec[n][j]=1;
                v.push_back(n+1);
                nQueenRec(ans,vec,v,0,j+1,N);
                v.pop_back();
                vec[n][j]=0;
            }
        }
        vec[i][j]=0;
    }
    vector<vector<int>> nQueen(int n) {
        // code here
        vector<vector<int>>ans;
        vector<vector<int>>vec;
        for(int i=0;i<n;i++)
        {
            vector<int>v;
            for(int j=0;j<n;j++)
                v.push_back(0);
            vec.push_back(v);
        }
        vector<int>v;
        nQueenRec(ans,vec,v,0,0,n);
        return ans;
    }
