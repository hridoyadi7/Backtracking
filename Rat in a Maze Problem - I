https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1/?category[]=Backtracking&category[]=Backtracking&page=1&query=category[]Backtrackingpage1category[]Backtracking

bool isValidMove(int i,int j,int n,int m[MAX][MAX])
{
    return (i>=0 && i<n && j>=0 && j<n && m[i][j]==1);
}
void findPathRec(int m[MAX][MAX],int i,int j,string str,int n,vector<string>&ans)
{

    if(m[i][j]==0)
        return ;
    if(i==n-1 && j==n-1)
    {
        ans.push_back(str);
        return ;
    }

    m[i][j]=-1;
    
    if(isValidMove(i+1,j,n,m))
        findPathRec(m,i+1,j,str+"D",n,ans);
    if(isValidMove(i,j-1,n,m))
        findPathRec(m,i,j-1,str+"L",n,ans);
    if(isValidMove(i,j+1,n,m))
        findPathRec(m,i,j+1,str+"R",n,ans);
    if(isValidMove(i-1,j,n,m))
        findPathRec(m,i-1,j,str+"U",n,ans);

    
    m[i][j]=1;
    return ;
    
}
vector<string> findPath(int m[MAX][MAX], int n) {
    // Your code goes here
    vector<string>ans;
    findPathRec(m,0,0,"",n,ans);
    return ans;
    
}
